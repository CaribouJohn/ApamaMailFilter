
/** 
	This monitor loads a python plugin that
	provides access to and monitoring of 
	a mailbox with the intention that it 
	can move, filter and categorise email. 
*/

/**
	The python will monitor the IMAP mail
	in a background thread and send events to Apama 
	when messages are recieved.
*/
event MailUpdate{
	integer msgid;
	string hostname;
}

/**
	MailSummary is the core driver for the rules
	generated in the Apama engine initially.

	By calling Summarize() on the plugin we get 
	back events for hosts that we have received
	mail from.

	The events will trigger the creation of rules
	based on the default parameters set in the
	configuration. 

*/
event MailSummary{
	string hostname;
	integer occurrences;
	boolean moveToFolder;
	string folder;
}

/**
	page triggers this event after user clicks on the button (add/remove) rule
*/
event UpdateRule{
	string hostname;
	boolean enabled;
}

//The idea of this is that we only update the Corrlator model
//once the config is saved by the python. 
event TriggerRefresh {}

monitor MailFilter {

	//load up the python 
	import "MailFilterPlugin" as filterPlugin;

	//initialised from python in onload()
	dictionary< string , MailSummary > mailSummary;
	
	//initialise the monitor with current rules and 
	action onload() {
		
		monitor.subscribe("mail_events");
		
		//At startup get a list of the current status from the plugin which 
		//will have loaded the config  
		mailSummary := filterPlugin.generateSummary();
		
		//debug 
		string key;	
		for key in mailSummary.keys(){
			log "Summary: " + mailSummary[key].toString() at INFO;
		}
				
		on all MailUpdate() as mailUpdate {
			processUpdate(mailUpdate);
		}
		
		on all UpdateRule() as ruleUpdate {
			updateRule(ruleUpdate);
		}
		
		on all TriggerRefresh(){
			log "Refresh received" at INFO;
			mailSummary := filterPlugin.generateSummary();
		}
		
		//allow messages to be passed in now. 
		com.softwareag.connectivity.ConnectivityPlugins.onApplicationInitialized();
		log "Loaded monitor MailFilter" at INFO;
	}
	
	
	//here we going to check whether it is a host that should be 
	//actioned in some way
	action processUpdate(MailUpdate mailUpdate) {
		log "Mail UPDATE " + mailUpdate.toString() + " received " at INFO;
		//Make a directory with the hostname, 
		if( mailSummary[mailUpdate.hostname].moveToFolder ) {
			filterPlugin.moveMessage(mailUpdate.msgid , mailUpdate.hostname);
		}
	}
	
	

	//page triggers this event after user clicks on the button (add/remove) rule
	action updateRule(UpdateRule ruleUpdate) {
		log "UPDATE " + ruleUpdate.toString() + " received " at INFO;
		mailSummary[ruleUpdate.hostname].moveToFolder := ruleUpdate.enabled;
		filterPlugin.updateHost(ruleUpdate);
	}
	
	
}
