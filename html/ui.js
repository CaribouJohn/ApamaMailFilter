
 	
//
// borrowed code to implement tabs
// https://forum.vuejs.org/t/tabs-with-vue-2-0/2656
// origin: https://jsfiddle.net/phohbjg4/126/
//
Vue.component('my-tabs', {
  template: '#tabs',
  data: function() {
    return {
      tabs: [],
      current: null
    };
  },
  methods: {
    addTab: function(tab) {
      this.tabs.push(tab);
      if (tab.active === true) {
        this.current = tab;
      }
    },
    changeTab: function(tab) {
      this.current = tab;
      this.tabs.forEach(function(value) {
        if (value === tab) {
          value.active = true;
        } else {
          value.active = false;
        }
      });
    },
    removeTab: function(tab) {
      var index = this.tabs.indexOf(tab);
      this.tabs.splice(index, 1);
      this.$el.removeChild(tab.$el);
      tab.removeTab();
      if(this.tabs[0]){
      	this.changeTab(this.tabs[0]);
      }
    }
  }
});


Vue.component('my-tab', {
  template: '#tab',
  data: function() {
    return {
      active: false
    };
  },
  props: {
    'title': {
      required: true,
      type: String
    },
    'isActive': {
      required: false,
      type: Boolean,
      default: false
    }
  },
  methods: {
    removeTab: function() {
      this.$destroy();
    }
  },
  created: function() {
    this.active = this.isActive;
  },
  mounted: function() {
    this.$parent.addTab(this);
  },
  watch: {
    // isActive: function(){}
  }
});



// load the json from Apama, this is generated by the plugin
// when events hit the correlator this triggers updates in that
// file which will be rendered by this page.

//
// The Vue object that is the heart of the page
//
var app = new Vue({ 
	//attached to id='app'
    el: '#app',
    
    // reactive data
    data: function() {
    	return {sourcehosts : [] , parameters: {simulate: true, moveToFolderThreshold: 5, updateFrequency:300}, lastmessage: 1};
    },

  	created: function() {
  	    //Initialise and set page refresh.
		$.ajax({
			beforeSend: function(xhrObj){
		        xhrObj.setRequestHeader("Content-Type","application/json");
		        xhrObj.setRequestHeader("Accept","application/json");
		    },
		    url: '/hostdetails.json', 
		    method: 'GET', 
		    success: function(json) {
		    	var newList = JSON.parse(json);
	    	    console.log(newList);
		    	// replace the list - naive but vue does this nicely
		    	app.sourcehosts = [];
		    	for (var key in newList.sourcehosts) {
		    	    // skip loop if the property is from prototype
		    	    if (!newList.sourcehosts.hasOwnProperty(key)) continue;
		    	    var obj = newList.sourcehosts[key];
		    	    app.sourcehosts.push(obj);
		    	}				    	
		    	
	    	    // sort decending by occurrences
	    	    app.sourcehosts.sort(
	    	    	function(a,b) {return (a.occurrences > b.occurrences) ? -1 : ((b.occurrences > a.occurrences) ? 1 : 0);}
	    	    );
	    	    
	    	    app.parameters.updateFrequency = newList.parameters.updateFrequency;
	    	    console.log(app.parameters.updateFrequency)
	    	    this.timer = setInterval(this.refresh, app.parameters.updateFrequency * 1000);
		    }
		});
	},
	
    methods: {
    	
    	cancelAutoUpdate: function() { 
    		clearInterval(this.timer) 
    	},

		updateParameter: function(name,value){
			$.ajax({
				beforeSend: function(xhrObj){
			        xhrObj.setRequestHeader("Content-Type","application/json");
			    },
			    url: '/?type=UpdateParameter&channel=mail_events', 
			    method: 'PUT', 
			    data: '{"hostname":"' + hostname + '","enabled":"true"}', 
			    success: function(json) {console.log(json);}
			});
			alert('updating '+ name +' : ' + value)
		},
		
		refresh: function(){
			$.ajax({
				beforeSend: function(xhrObj){
			        xhrObj.setRequestHeader("Content-Type","application/json");
			        xhrObj.setRequestHeader("Accept","application/json");
			    },
			    url: '/hostdetails.json', 
			    method: 'GET', 
			    success: function(json) {
			    	//console.log(json); //response from apama correlator
			    	var newList = JSON.parse(json);
			    	// replace the list - naive but vue does this nicely
			    	app.sourcehosts = [];
			    	for (var key in newList.sourcehosts) {
			    	    // skip loop if the property is from prototype
			    	    if (!newList.sourcehosts.hasOwnProperty(key)) continue;
			    	    var obj = newList.sourcehosts[key];
			    	    app.sourcehosts.push(obj);
			    	}				    	
			    	
		    	    // sort decending by occurrences
		    	    app.sourcehosts.sort(
		    	    	function(a,b) {return (a.occurrences > b.occurrences) ? -1 : ((b.occurrences > a.occurrences) ? 1 : 0);}
		    	    );
			    }
			});
		},
		
		addRule: function(hostname){
			// Here we send an UpdateRule event to the correlator
			// it triggers processing that will update the configuration
			// and start the move of mails.
			$.ajax({
				beforeSend: function(xhrObj){
			        xhrObj.setRequestHeader("Content-Type","application/json");
			    },
			    url: '/?type=UpdateRule&channel=mail_events', 
			    method: 'PUT', 
			    data: '{"hostname":"' + hostname + '","enabled":"true"}', 
			    success: function(json) {
			    	app.refresh();
			    }
			});
		},
		
		delRule: function(hostname){
			// Here we send an UpdateRule event to the correlator
			// it switches off of the processing of mails from the host
			// It will not return mails to the inbox that have already been
			// moved.
			$.ajax({
				beforeSend: function(xhrObj){
			        xhrObj.setRequestHeader("Content-Type","application/json");
			    },
			    url: '/?type=UpdateRule&channel=mail_events', 
			    method: 'PUT', 
			    data: '{"hostname":"' + hostname + '","enabled":"false"}', 
			    success: function(json) {
			    	app.refresh();
			    }
			});
		},
		
		beforeDestroy() {
			clearInterval(this.timer)
		}
    }
});
